//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////

// ----------------------------------- Output parameters ---------------------------------------

rule "Eval UTMirexAudChEstActivity succeeded"
	when
		active activity 'UTMirexAudChEstActivity'
		subrequest 'ReqRun' for activity
		subrequest succeeded
	then
		activity succeeded
		insert artifact '"Unit tests succeeded"' as 'GenericUserInfoMessage'
end

// #############################################################################################

rule "ut mirex audchest: assert ut dataset"
	when
		active activity 'UTMirexAudChEstActivity'
		not FolderArtifact(name=="dataset_ut_mirex_audio_ch_est") for activity
	then
//		insert '"dataset_ut_mirex_audio_ch_est", "/home/andrei/OpenShift/datadir/cea1c11a-ff7b-4f6f-8974-d327f3ec544b/dataset_ut_mirex_audio_ch_est", ""' as 'FolderArtifact';
		insert '"dataset_ut_mirex_audio_ch_est", "D:\\SPBSTU\\git\\dataset_ut_mirex_audio_ch_est", ""' as 'GenericFolderArtifact';
end

rule "ut mirex audchest: download ut dataset"
	when
		active activity 'UTMirexAudChEstActivity'
		$aref : ArtifactRef(name=="dataset_ut_mirex_audio_ch_est") for activity
	then
		add subrequest 'ReqDeployFolder'
		add subrequest parameter '$aref'
end

rule "ut mirex audchest: run on test dataset"
	when
		active activity 'UTMirexAudChEstActivity'
		$exec : ExecutableFileArtifact for activity
		$dataset : any 'FolderArtifact(name=="dataset_ut_mirex_audio_ch_est")'
		$req : RunFormat for activity
	then
		add subrequest 'ReqRun'; 
		add subrequest parameter '$exec'
		add subrequest parameter '$req'
		add subrequest parameter '$dataset' with name "dataset";
end

