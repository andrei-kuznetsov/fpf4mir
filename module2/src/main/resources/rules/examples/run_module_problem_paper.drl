//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;

import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
///////////////////////////////////////////////////////////////////////////////

///////////// java /////////////////
declare ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityBase end
declare ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityRelatedFactBase end
declare ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.RequestBase end
declare ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.RequestScopedKnowledgeBase end
////////// end of java /////////////

declare R_M1Activity extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityBase
end

declare R_M1 extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.RequestBase
end

declare Ak extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityRelatedFactBase
end

declare A1 extends Ak
end

declare A2 extends Ak
end

declare A3 extends Ak
end

declare Kk
end

declare K1 extends Kk
end

declare K2 extends Kk
end

declare NeedK extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.RequestScopedKnowledgeBase
	activity : Activity; // add the field to constructor 
	k : Kk;
end

declare Log extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityRelatedFactBase
	activity : Activity; // add the field to constructor 
	msg : java.lang.String;
end

declare ErrInvalidK extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityErrorBase
end

rule "START"
	when
		not Ak()
	then
		Request r;
		Ak a;
		Alias als;
		insert(r = new R_M1());
		insert(a = new A1());
		insert(new GenericDownstreamAlias().reset(r, a));

		insert(r = new R_M1());
		insert(a = new A2());
		insert(new GenericDownstreamAlias().reset(r, a));
		
		insert(r = new R_M1());
		insert(a = new A3());
		insert(new GenericDownstreamAlias().reset(r, a));
end

rule "Request status"
	when
		$r : R_M1()
		$rstatus : RequestFinalStatus(request == $r);
	then
		System.err.println($rstatus);
end

rule "Activity status"
	when
		$a : R_M1Activity()
		$astatus : ActivityFinalStatus(activity == $a);
	then
		System.err.println($astatus);
end

rule "Activity log"
	when
		$a : R_M1Activity()
		$lc : ActivityLifeCycleState(activity == $a);
	then
		System.err.println($lc);
end

rule "Request log"
	when
		$r : R_M1()
		$lc : RequestLifeCycleState(request == $r);
	then
		System.err.println($lc);
end

rule "RD: error identification"
	when 
		$activity : R_M1Activity()
	 	ALCWork(activity == $activity)
		Log(activity == $activity, msg != "ok")
	then 
		insert(new ErrInvalidK().reset($activity));
		insert(new GenericActivityFailed().reset($activity));
		System.out.println("Activity failed: " + $activity);
		System.out.println("Invalid component K detected");
end

rule "R1: need K1"
	when 
		$activity : R_M1Activity()
		$err : ErrInvalidK(activity == $activity)
	 	ALCAnalyze(activity == $activity)
		Log(activity == $activity, msg == "Need K1")
	then 
		insert( new GenericUpstreamAliasRSK().reset($activity, new NeedK($activity, new K1())) );
		insert( new GenericActivityErrorFixed($err) );
		System.out.println("Problem fixed - using K1 next time");
end

rule "R1: need K2"
	when 
		$activity : R_M1Activity()
		$err : ErrInvalidK(activity == $activity)
	 	ALCAnalyze(activity == $activity)
		Log(activity == $activity, msg == "Need K2")
	then 
		insert( new GenericUpstreamAliasRSK().reset($activity, new NeedK($activity, new K2())) );
		insert( new GenericActivityErrorFixed($err) );
		System.out.println("Problem fixed - using K2 next time");
end

rule "ПД - успех"
	when 
		$activity : R_M1Activity()
	 	ALCWork(activity == $activity)
		Log(activity == $activity, msg == "ok")
	then 
		insert(new GenericActivitySucceeded().reset($activity));
		System.out.println("Success: " + $activity);
end

rule "R'"
	when 
		$activity : R_M1Activity()
	 	ALCWork(activity == $activity)
		$a : Ak(activity == $activity)
		not NeedK(activity == $activity)
	then
		System.out.println("run with no K: " + $a);
		if ($a instanceof A1){
			insert( new Log($activity, "Need K1") );
			System.out.println("run: Need K1");
		} else if ($a instanceof A2){
			insert( new Log($activity, "Need K2") );
			System.out.println("run: Need K2");
		} else if ($a instanceof A3){
			insert( new Log($activity, "ok") );
			System.out.println("run: OK");
		}
end

rule "ПИ"
	when 
		$activity : R_M1Activity()
	 	ALCWork(activity == $activity)
		$a : Ak(activity == $activity)
		NeedK(activity == $activity, $k: k)
	then
		System.out.println("run: " + $a + ", " + $k);
		if ($a instanceof A1){
			if ($k instanceof K1){
				insert( new Log($activity, "ok") );
				System.out.println("run: OK");
			} else {
				insert( new Log($activity, "Need K1") );
				System.out.println("run: Need K1");
			}
		} else if ($a instanceof A2){
			if ($k instanceof K2){
				insert( new Log($activity, "ok") );
				System.out.println("run: OK");
			} else {
				insert( new Log($activity, "Need K2") );
				System.out.println("run: Need K2");
			}
		} else if ($a instanceof A3){
			insert( new Log($activity, "Need no K") );
			System.out.println("run: Need no K");
		}
end