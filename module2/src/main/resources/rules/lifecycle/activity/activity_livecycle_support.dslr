//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////

declare ActivityLifecycleChangePermitted extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.ActivityRelatedFactBase end

rule "Activity lifecycle change permitted"
		salience -20000
	when 
		any activity
	 	not ActionFact for activity
>		forall ($rf : RequestFact(parentActivity == $activity)
>               RLCCompleted(request == $rf))
	then
		insertLogical ActivityLifecycleChangePermitted
end

rule "Activity first lifecycle phase"
		salience -20000
	when 
		any activity
		not ActivityLifeCycleState for activity
	then
 		insert ALCPrepareWork
end

rule "Activity activation"
		salience -20000
	when 
		any activity
		ActivityLifecycleChangePermitted for activity
		$aa : ALCPrepareWork for activity
	 	not ALCWork for activity  
	then
>		retract($aa);
 		insert ALCWork
end

rule "Activity analitycs activation"
		salience -20000
	when 
		any activity
		ActivityLifecycleChangePermitted for activity
		$aa : ALCWork for activity
	 	not ALCAnalyze for activity  
	then
>		retract($aa);
 		insert ALCAnalyze
end

rule "Activity prepare astatus facts"
	salience -20000
	when
		any activity
		ActivityLifecycleChangePermitted for activity
	 	$aa : ALCAnalyze for activity
	 	not ALCPrepareAStatus for activity
 	then
>		retract($aa);
 		insert ALCPrepareAStatus
end

rule "Activity completed"
	salience -20000
	when
		any activity
		ActivityLifecycleChangePermitted for activity
	 	$aa : ALCPrepareAStatus for activity
	 	not ALCCompleted for activity
 	then
>		retract($aa);
 		insert ALCCompleted
end
