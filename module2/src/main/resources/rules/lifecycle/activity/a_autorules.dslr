//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////

rule "Assert user action ref (propagation)"
		salience 10000
	when
		any activity
		// any phase
		$ua : UserAction for activity
	then
		insertLogical '$ua' as 'UserActionRef';
end

rule "ActivityToActivityStatusCopy facts (UserActionRef)"
		salience 10000
	when
		any activity
		// any phase
		$value : UserActionRef for activity
	then
>		insertLogical(new ActivityToActivityStatusCopy($activity, $value));
end

rule "ActivityToActivityStatusCopy facts (UserInfo)"
		salience 10000
	when
		any activity
		// any phase
		$value : UserInfo for activity
	then
>		insertLogical(new ActivityToActivityStatusCopy($activity, $value));
end

rule "Insert ALCMain for (ALCWork || ALCAnalyze)"
		salience 10000
	when
		any activity
		not ALCMain for activity
		(ALCWork for activity or
		ALCAnalyze for activity)
	then
		insert ALCMain
end

rule "Retract ALCMain for not(ALCWork || ALCAnalyze)"
		salience 10000
	when
		any activity
		$m : ALCMain for activity
		not ALCWork for activity
		not ALCAnalyze for activity
	then
>		retract($m);
end
