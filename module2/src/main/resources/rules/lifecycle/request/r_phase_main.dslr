//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////


rule "Activity_New"
		salience -10000
	when
		any activity request
		RLCMain for request
//		$dbg_list : java.util.LinkedList(  ) from collect ( Activity( request == $request ) )
>		forall ( $a : Activity( request == $request )
>				 ALCCompleted( activity == $a ) 
>	             ActivityFailed( activity == $a ) 
> 		         ActivityErrorFixed( activity == $a ) )
	then
//		System.out.println("## activities (" + $dbg_list.size() + "): " + new java.util.HashSet($dbg_list));
>		insert ( createActivityForRequest($request, drools) );
end

rule "req phase main: fail request if activity cant be fixed (default)"
		salience -10000
	when
		any activity request
		activity for request
		ALCCompleted for activity
		$failure : ActivityFailed for activity
		not ActivityErrorFixed for activity
	then
		insertLogical '$failure.getMessage()' as 'GenericRequestFailed' for request;
end

rule "request main phase (auto): read from subactivity (single fact)"
		salience 10000
	when 
	 	any activity request
	 	RLCMain for request
		activity for request
		ALCPrepareStatus for activity
	 	$activityStatus : ActivityFinalStatus for activity
>		$value : UpstreamAlias(astatus == $activityStatus)
	then
>		insert( new GenericUpstreamAlias().reset($request, $value) );
end