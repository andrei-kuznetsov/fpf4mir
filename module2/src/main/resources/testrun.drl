import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.mir.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.run.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.run.java.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.mirex.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;


rule "TestRun_ResultDir"
	when
		ReqCreateNewRunResultDir()
		$dd : DataDirRoot( )
		$run : Run(  )
		not ResultDir4Run( run == $run )
	then
		insert( new ResultDir4Run($run, $dd) );
end


rule "Run_JavaCommand"
	when
		$run : JavaRun(  )
		not ExecStatus( activity == $run )
		$exec : JavaRunExecutableArtifact(workingDir  != null, file != null)
		$javaoptions : java.util.LinkedList() from collect ( JavaRunArgument() )
		$runoptions : java.util.LinkedList() from collect ( RunOption( activity == $run ) )
		$runordinals : java.util.LinkedList(size > 0) from collect ( RunOrdinal( activity == $run ) )
	then
		insertLogical( new JavaRunCommand($run, $exec.getWorkingDir(), $javaoptions, $runoptions, $runordinals) );	
end

rule "NewRun_Java"
	when
		$run : Run(  )
		not JavaRun( this == $run )
		RunSystem(runSystem == RunSystem.RUN_SYSTEMS.JAVA)
	then
		retract($run);
		insert( new JavaRun($run) );
end

rule "TestRunStatus"
	when
		$run : Run( id == R.id.TestActivity )
		ExecStatus( activity == $run, succeeded == true )
	then
		insertLogical( new RunSucceeded($run));
end