import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;

rule "CommandExecutor"
	when
		$cmd : ExecCommand( )
		not ExecStatus( execCommand == $cmd )
	then
		insertLogical( new ExecAction($cmd) );
end

rule "Activity_New"
	when
		$rr : ReqNewActivity(  )
		forall ( $b : Activity( request == $rr )
	             ActivityFailed( activity == $b ) 
 		         ActivityErrorFixed( activity == $b ) )
	then
		String pkg = $rr.getClass().getPackage().toString();
		String type = $rr.getClass().getSimpleName();
		type = type.replaceAll("ReqNew","").replaceAll("Req", "") + "Activity";
		
		// TODO: package name?
		pkg = "defaultpkg";
		System.out.println("## pkg: " + pkg);
		System.out.println("## type: " + type);
		
		org.drools.definition.type.FactType factType = drools.getKnowledgeRuntime().getKnowledgeBase().getFactType(pkg, type);
		Object fact = factType.newInstance();
		factType.set(fact, "request", $rr);
		insert( fact );
end

rule "Activity Request Failure Status"
	salience -1000 // salience shall be less than for rule "Activity_New"
	when
		$request : ReqNewActivity( )
		$activity : Activity( request == $request )
		$failure : ActivityFailed( activity == $activity )
		not ActivityErrorFixed(activity == $activity)
	then
		insertLogical(new RequestFailed($request, $failure.getMessage()));
end

rule "Propagate UserActionAlias (rstatus)"
	when
		$request : ReqNewActivity( )
		$rstatus : RequestStatus( request == $request )
		$activity : Activity( request == $request )
		$ua : UserActionAlias( activity == $activity)
	then
		insertLogical(new UserActionAlias($rstatus, $ua));
end 

rule "Propagate UserActionAlias (activity)"
	when
		$activity : Activity(  )
		$request : ReqNewActivity( parentActivity == $activity )
		$rstatus : RequestStatus( request == $request )
		$ua : UserActionAlias( rstatus == $rstatus)
	then
		insertLogical(new UserActionAlias($activity, $ua));
end 

rule "Suspend activity for user action (propagation)"
	when
		$activity : Activity( )
		$ua : UserAction( activity == $activity )
	then
		insertLogical(new GenericActivitySuspended($activity, "Activity suspended due to user action: " + $ua));
		insertLogical(new UserActionAlias($activity, $ua));
end

rule "Suspend request for suspended activity (propagation)"
	when
		$request : ReqNewActivity( )
		$activity : Activity( request == $request )
		exists ActivitySuspended( activity == $activity )
	then
		insertLogical(new RequestSuspended($request, "Suspended because nested activity is suspended"));
end

rule "Suspend activity for suspended subrequest (propagation)"
	when
		$activity : Activity(  )
		$request : ReqNewActivity( parentActivity == $activity )
		exists RequestSuspended( request == $request )
	then
		insertLogical(new GenericActivitySuspended($activity, "Suspended because subrequest is suspended"));
end