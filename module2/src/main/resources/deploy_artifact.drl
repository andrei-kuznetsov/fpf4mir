import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.*;

rule "Assert file artifact for deployment at ReqNewOriginalArtifact_handler.drl"
	when
		$r : ReqNewDeployFolder(  )
		$da : DeployActivity( request == $r )
		$file : FileArtifactAlias( request == $r )
	then
		insert( new FileArtifact($da, $file) );
end

rule "Assert folder artifact for deployment at ReqNewOriginalArtifact_handler.drl"
	when
		$r : ReqNewDeployFolder(  )
		$da : DeployActivity( request == $r )
		$folder : FolderArtifactAlias( request == $r )
	then
		insert( new FolderArtifact($da, $folder) );
end

rule "Assert artifactref for deployment at ReqNewOriginalArtifact_handler.drl"
	when
		$r : ReqNewDeployFolder(  )
		$da : DeployActivity( request == $r )
		$ref : GenericArtifactRefAlias( request == $r )
	then
		insert( new ArtifactRef($da, $ref) );
end

rule "DownloadArtifact"
	when 
		$da : DeployActivity(  )
		$ref : ArtifactRef(activity == $da)
		not Artifact(activity == $da)
	then
		insert( new ReqDownloadHttp($da, $ref) );
end

rule "Assert Downloaded Artifact"
	when 
		$da : DeployActivity(  )
		$dlReq : ReqDownloadHttp(parentActivity == $da)
		$ds : RequestStatus( request == $dlReq, succeeded == true )
		$dlResult : FileArtifactAlias( request == $dlReq )
	then
		insert( new FileArtifact($da, $dlResult.getFile()) );
end

rule "Assert Download Failed Artifact"
	when 
		$da : DeployActivity(  )
		$dlReq : ReqDownloadHttp(parentActivity == $da)
		$ds : RequestStatus( request == $dlReq, succeeded == false )
	then
		insert( new GenericActivityError($da, "Can't download artifact") );
end

rule "ExtractArtifact"
	when 
	    $da : DeployActivity(  )
		$artifact : FileArtifact(activity == $da, fileName.endsWith(".zip"))
		not FolderArtifact(activity == $da)
	then
		insert( new ReqExtract($artifact, $da) );
end

rule "Process exctracted artifact"
	when 
	    $da : DeployActivity(  )
	    $re : ReqExtract( parentActivity == $da )
	    FolderArtifactAlias( request == $re, $folder : folder )
	then
		insert( new FolderArtifact($da, $folder) );
end

// TODO: activity succeeded -> request succeeded
rule "Assert DeployFolder"
	when 
	    $da : DeployActivity( $r : request )
		$req : ReqNewDeployFolder( this == $r, $dname : deploymentName  )
		$artifact : FolderArtifact( activity == $da )
	then
		insertLogical( new DeployFolder($artifact, $dname, $req) );
		insertLogical( new GenericActivitySucceeded($da) );
end

rule "DeployRequestStatus"
	when 
	    $r : ReqNewDeployFolder()
	    DeployFolder( request == $r )
	then
		insertLogical( new RequestStatus( $r, "ok", true ) );
end

rule "DeployRequestStatus in progress"
	when 
	    $r : ReqNewDeployFolder()
	    not RequestStatus( request == $r, succeeded == true )
	then
		insertLogical( new RequestStatus( $r, "in progress...", false) );
end