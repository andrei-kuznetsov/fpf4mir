import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.deploy.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;


// #################################### Input parameters #######################################
// automatic
// ----------------------------------- Output parameters ---------------------------------------

rule "GuessBuildFile activity status"
	when
		active activity 'GuessBuildFileActivity'
		$list : BuildFileArtifactList for activity
	then
		activity succeeded
		add activity status parameter $list as GenericAlias
end

// #############################################################################################

rule "Analyze well known build files"
	when
		active activity 'GuessBuildFileActivity'
>		FolderArtifact( activity == $activity,
>			$mvnlist : getFileArtifactListForPattern("**\\pom.xml"),
>			$antlist : getFileArtifactListForPattern("**\\build.xml"),
>			$mklist  : getFileArtifactListForPattern("**\\makefile")
>)
	then
>		if ($mvnlist.size() > 0)
			insert artifact 'getTopmost($mvnlist)' as 'BuildFileCandidate'
			
>		if ($antlist.size() > 0)
			insert artifact 'getTopmost($antlist)' as 'BuildFileCandidate'
			
>		if ($mklist.size() > 0)
			insert artifact 'getTopmost($mklist)' as 'BuildFileCandidate'
end

rule "List BuildFile candidates"
	salience -1 // shall be less than the salience of rules about BuildArtifactCandidate
	when
		active activity 'GuessBuildFileActivity'
>		$candidates : java.util.LinkedList(  ) from collect( BuildFileCandidate(activity == $activity) )
	then
		insert artifact '$candidates' as 'BuildFileArtifactList'
end
