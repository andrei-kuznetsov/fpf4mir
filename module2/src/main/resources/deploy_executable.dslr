import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.deploy.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;

declare DeployExecOption_Build extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end
declare DeployExecOption_Run extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end
declare DeployExecOption_Autodetect extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end

declare ReqDeployExecOption_Build extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.AliasBase end
declare ReqDeployExecOption_Run extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.AliasBase end

// #################################### Input parameters #######################################
// automatic
// ----------------------------------- Output parameters ---------------------------------------

rule "DeployExecutable Request Status"
	when
		request 'ReqDeployExecutable'
		activity for request
		activity succeeded
		$artifact : ExecutableFileArtifact for activity
	then
		set request status succeeded
		add request status parameter $artifact as GenericExecutableFileArtifactAlias
end

// #############################################################################################

rule "Autodetect rule"
	when
		request 'ReqDeployExecutable'
		activity for request
		not ReqDeployExecOption_Build for request
		not ReqDeployExecOption_Run for request
	then
>		insertLogical(new DeployExecOption_Autodetect($activity));
end
		
rule "Deploy executable from file artifact"
	when
		active activity 'DeployExecutableActivity'
		$file : FileArtifact for activity
		not FolderArtifact for activity
	then
		add subrequest 'ReqDeployFolder'
		add subrequest parameter '$file' as 'GenericFileArtifactAlias'
end

/*
use deployed folder as is when FolderArtifactAlias( request == $r )
*/

rule "Deploy executable from URL"
	when
		active activity 'DeployExecutableActivity'
		$ref : ArtifactRef for activity
		not FolderArtifact for activity
	then
		add subrequest 'ReqDeployFolder'
		add subrequest parameter '$ref' as 'GenericArtifactRefAlias'
end

rule "Evaluate run executable list"
	when
		active activity 'DeployExecutableActivity'
		$artifact : FolderArtifact for activity
		not ExecutableFileArtifact for activity
		not ExecFileArtifactList for activity
		(DeployExecOption_Autodetect for activity or DeployExecOption_Run for activity)
	then
		add subrequest 'ReqGuessRunExecutable'
		add subrequest parameter '$artifact' as 'GenericFolderArtifactAlias'
end

rule "Evaluate build file list"
	when
		active activity 'DeployExecutableActivity'
		$artifact : FolderArtifact for activity
		not ExecutableFileArtifact for activity
		not BuildFileArtifactList for activity
		(DeployExecOption_Autodetect for activity or DeployExecOption_Build for activity)
	then
		add subrequest 'ReqGuessBuildFile'
		add subrequest parameter '$artifact' as 'GenericFolderArtifactAlias'
end

rule "Exec artifact found"
	when
	 	active activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 1, activity == $activity)
>		BuildFileArtifactList(size == 0, activity == $activity)
	then
		insert artifact '(ExecutableFileArtifact)$exec.get(0)' as 'ExecutableFileArtifact'
end

rule "Build file found"
	when
	 	active activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 0, activity == $activity)
>		$build : BuildFileArtifactList(size == 1, activity == $activity)
	then
		insert artifact '(BuildFile)$exec.get(0)' as 'BuildFile'
end

rule "Can build or run (choose build or run)"
	when
	 	active activity 'DeployExecutableActivity'
	 	not ExecutableFileArtifact for activity
		not BuildFile for activity
>		(
>			($exec : ExecFileArtifactList(size > 0, activity == $activity) and $build : BuildFileArtifactList(size > 0, activity == $activity))
>			or
>			($exec : ExecFileArtifactList(size > 1, activity == $activity) and $build : BuildFileArtifactList(size == 0, activity == $activity))
>			or
>			($exec : ExecFileArtifactList(size == 0, activity == $activity)	and $build : BuildFileArtifactList(size > 1, activity == $activity))
>		)
	then
		// user action to choose the correct exec or build file
		def user action UserActionSelectBuildOrRun
		add user action attr ExecArtifacts as $exec
		add user action attr BuildArtifacts as $build
		add user action
end

rule "Can't build or run (no alternatives)"
	when
	 	active activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 0, activity == $activity)
>		$build : BuildFileArtifactList(size == 0, activity == $activity)
	then
		activity failed with type FR_NO_BUILD_OR_EXEC_FILES_FOUND and message "no build or executable files found"
end

rule "Do build"
	when
		active activity 'DeployExecutableActivity'
		$artifact : BuildFile for activity
		not ExecutableFileArtifact for activity
	then
		add subrequest 'ReqBuild'
		add subrequest parameter '$artifact' as 'GenericFileArtifactAlias'
end

rule "Eval DeployExecutableActivity succeeded"
	when
		active activity 'DeployExecutableActivity'
		ExecutableFileArtifact for activity
	then
		activity succeeded
end
