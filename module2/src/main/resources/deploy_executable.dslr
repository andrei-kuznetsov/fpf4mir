import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.deploy.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.requestfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;

declare DeployExecOption_Build extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end
declare DeployExecOption_Run extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end
declare DeployExecOption_Autodetect extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.ActivityRelatedFactBase end

declare ReqDeployExecOption_Build extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.AliasBase2 end
declare ReqDeployExecOption_Run extends ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.generic.AliasBase2 end

// #################################### Input parameters #######################################
rule "Populate input parameters for DeployExecutableActivity from ReqDeployFolder"
	when
		request 'ReqDeployExecutable'
		activity 'DeployExecutableActivity' for request
		request inputs (
		    input 'FileArtifactAlias'
		    input 'FolderArtifactAlias'
		    input 'ArtifactRefAlias'
		    input 'ReqDeployExecOption_Build'
		    input 'ReqDeployExecOption_Run'
>		)
	then
		add activity fact from request input
end

// ----------------------------------- Output parameters ---------------------------------------

rule "DeployExecutable Request Status"
	when
		request 'ReqDeployExecutable'
		activity 'DeployExecutableActivity' for request
		activity succeeded
		$artifact : ExecutableFileArtifact for activity
	then
		set request status succeeded
		add request status parameter $artifact as GenericExecutableFileArtifactAlias
end

// #############################################################################################

rule "Autodetect rule"
	when
		request 'ReqDeployExecutable'
		activity for request
		not ReqDeployExecOption_Build for request
		not ReqDeployExecOption_Run for request
	then
>		insertLogical(new DeployExecOption_Autodetect($activity));
end
		
rule "Deploy executable from file artifact"
	when
		activity 'DeployExecutableActivity'
		$file : FileArtifact for activity
		not FolderArtifact for activity
	then
		add subrequest 'ReqDeployFolder'
		add subrequest parameter '$file' as 'GenericFileArtifactAlias'
end

/*
use deployed folder as is when FolderArtifactAlias( request == $r )
*/

rule "Deploy executable from URL"
	when
		activity 'DeployExecutableActivity'
		$ref : ArtifactRef for activity
		not FolderArtifact for activity
	then
		add subrequest 'ReqDeployFolder'
		add subrequest parameter '$ref' as 'GenericArtifactRefAlias'
end

rule "Assert DeployFolder Artifact"
	when 
	    activity 'DeployExecutableActivity'
		subrequest 'ReqDeployFolder'
		subrequest succeeded
		subrequest outputs (
			subrequest output 'DeployFolder'
>		)
	then
		add activity fact from request output
end

rule "Process DeployFolder Artifact request faled"
	when 
	    activity 'DeployExecutableActivity'
		subrequest 'ReqDeployFolder'
		subrequest failed
	then
		activity failed with status "Can't deploy artifact locally. Reason: " + $subrequestStatus.getMessage()
end

rule "Evaluate run executable"
	when
		activity 'DeployExecutableActivity'
		$artifact : FolderArtifact for activity
		not ExecutableFileArtifact for activity
		(DeployExecOption_Autodetect for activity or DeployExecOption_Run for activity)
	then
		add subrequest 'ReqGuessRunExecutable'
		add subrequest parameter '$artifact' as 'GenericFolderArtifactAlias'
end

rule "Evaluate build file"
	when
		activity 'DeployExecutableActivity'
		$artifact : FolderArtifact for activity
		not ExecutableFileArtifact for activity
		(DeployExecOption_Autodetect for activity or DeployExecOption_Build for activity)
	then
		add subrequest 'ReqGuessBuildFile'
		add subrequest parameter '$artifact' as 'GenericFolderArtifactAlias'
end

rule "Process ReqGuessRunExecutable result"
	when 
	 	activity 'DeployExecutableActivity'
		subrequest 'ReqGuessRunExecutable'
		subrequest succeeded
		subrequest outputs (
			subrequest output 'ExecFileArtifactListAlias'
>		)
	then
		add activity fact from request output
end

rule "Process ReqGuessRunExecutable result failed"
	when 
	 	activity 'DeployExecutableActivity'
		subrequest 'ReqGuessRunExecutable'
		subrequest failed
	then
		activity failed with status "Can't guess executable"
end

rule "Process ReqGuessBuildFile result"
	when 
	 	activity 'DeployExecutableActivity'
		subrequest 'ReqGuessBuildFile'
		subrequest succeeded
		subrequest outputs (
			subrequest output 'BuildFileArtifactListAlias'
>		)
	then
		add activity fact from request output
end

rule "Process ReqGuessBuildFile result failed"
	when 
	 	activity 'DeployExecutableActivity'
		subrequest 'ReqGuessBuildFile'
		subrequest failed
	then
		activity failed with status "Can't guess build file"
end

rule "Exec artifact found"
	when
	 	activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 1, activity == $activity)
>		BuildFileArtifactList(size == 0, activity == $activity)
	then
		insert artifact '(ExecutableFileArtifact)$exec.get(0)' as 'ExecutableFileArtifact'
end

rule "Build file found"
	when
	 	activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 0, activity == $activity)
>		$build : BuildFileArtifactList(size == 1, activity == $activity)
	then
		insert artifact '(BuildFile)$exec.get(0)' as 'BuildFile'
end

rule "Can build or run (choose build or run)"
	when
	 	activity 'DeployExecutableActivity'
>		(
>			($exec : ExecFileArtifactList(size > 0, activity == $activity) and $build : BuildFileArtifactList(size > 0, activity == $activity))
>			or
>			($exec : ExecFileArtifactList(size > 1, activity == $activity) and $build : BuildFileArtifactList(size == 0, activity == $activity))
>			or
>			($exec : ExecFileArtifactList(size == 0, activity == $activity)	and $build : BuildFileArtifactList(size > 1, activity == $activity))
>		)			
	then
		// user action to choose the correct exec or build file
		def user action UserActionSelectBuildOrRun
		add user action attr ExecArtifacts as $exec
		add user action attr BuildArtifacts as $build
		add user action
end

rule "Can't build or run (no alternatives)"
	when
	 	activity 'DeployExecutableActivity'
>		$exec : ExecFileArtifactList(size == 0, activity == $activity)
>		$build : BuildFileArtifactList(size == 0, activity == $activity)
	then
		activity failed with type FR_NO_BUILD_OR_EXEC_FILES_FOUND and message "no build or executable files found"
end

rule "Eval DeployExecutableActivity succeeded"
	when
		activity 'DeployExecutableActivity'
		ExecutableFileArtifact for activity
	then
		activity succeeded
end
