import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.mir.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.build.maven.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionfacts.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.run.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.run.java.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.mirex.*;

rule "TestRun_Verify_ResultList__CallFormat_MIREX_AudioChordEstimation"
	when 
		CallFormat_MIREX_AudioChordEstimation()
		$run : RunActivity( id == R.id.TestActivity )
		ExecStatus( activity == $run, succeeded == true )
		$res : ResultDir4Run( run == $run )
	then
		insertLogical(new TestRunResult_FileArtifactList($run, $res.getFileArtifactListForPattern("*", TextFileArtifact.class)));
end

rule "TestRun_Verify_ResultsFNames__CallFormat_MIREX_AudioChordEstimation"
	when
		CallFormat_MIREX_AudioChordEstimation()
		
		$run : RunActivity( id == R.id.TestActivity )
		
		Dataset_FileArtifactList4Run( run == $run, $src : list )
		$res : TestRunResult_FileArtifactList( run == $run )
		
		accumulate( FileArtifact( $a : fileName ) from $src,
                    $src_fn : collectSet(String.format("%s.txt", $a)) )
                   
		$dst_fn : java.util.Set(this == $src_fn)
		          from accumulate( FileArtifact( $a : fileName ) from $res,
          		                   collectSet($a) )
	then
		insertLogical( new TestRunVerification_FileNamesOk($run) );
end

rule "TestRun_Diag1"
	when
		CallFormat_MIREX_AudioChordEstimation()
		$run : RunActivity( id == R.id.TestActivity )
		ExecStatus( activity == $run, succeeded == true )
		not ResultDir4Run( run == $run )
	then
		System.out.println("===> [Verify] No ResultDir4Run for run=" + $run);
end

rule "TestRun_Diag2"
	when
		CallFormat_MIREX_AudioChordEstimation()
		$run : RunActivity( id == R.id.TestActivity )
		ExecStatus( activity == $run, succeeded == true )
		not Dataset_FileArtifactList4Run( run == $run )
	then
		System.out.println("===> [Verify] No Dataset_FileArtifactList4Run for run=" + $run);
end

rule "TestRun_Diagnose_ResultsFNames__CallFormat_MIREX_AudioChordEstimation"
	when
		CallFormat_MIREX_AudioChordEstimation()
		
		$run : RunActivity( id == R.id.TestActivity )
		
		Dataset_FileArtifactList4Run( run == $run, $src : list )
		$res : TestRunResult_FileArtifactList( run == $run )
		
		accumulate( FileArtifact( $a : fileName ) from $src,
                    $src_fn : collectSet(String.format("%s.txt", $a)) )
                   
		$dst_fn : java.util.Set(this != $src_fn)
		          from accumulate( FileArtifact( $a : fileName ) from $res,
          		                   collectSet($a) )
	then
		System.out.println("===");
		System.out.println($src_fn);
		System.out.println("---");
		System.out.println($dst_fn);
		System.out.println("===");
end

rule "TestRun_Verify_ResultsFormat__CallFormat_MIREX_AudioChordEstimation"
	when
		CallFormat_MIREX_AudioChordEstimation()
		$run : RunActivity( id == R.id.TestActivity )
		ExecStatus( activity == $run, succeeded == true )
		$res : TestRunResult_FileArtifactList()
		forall( TextFileArtifact( lineFormatPattern( "^\\d+\\.\\d+\\s+\\d+\\.\\d+\\s+[a-hA-HN][#]?(:min)?$" ) == true ) from $res )
	then
		insertLogical( new TestRunVerification_FileFormatOk($run) );
end

rule "TestRun_Verify"
	when
		TestRunVerification_FileFormatOk( $run : run )
		TestRunVerification_FileNamesOk( run == $run )
	then
		insertLogical( new TestRunVerificationSucceeded($run) );
end
