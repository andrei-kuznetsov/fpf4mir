//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////

// ----------------------------------- Output parameters ---------------------------------------

rule "Build activity status"
	when
		active activity 'BuildActivity'
		$exec : ExecutableFileArtifact for activity
	then
		activity succeeded
		add activity status parameter '$exec';
end

// #############################################################################################


rule "NewBuild_Mvn"
	when
		active activity 'BuildActivity'
		$artifact : BuildFile( getFileName().endsWith("pom.xml") ) for activity
		not subrequest ReqMvnBuild for activity
	then
		add subrequest 'ReqMvnBuild'
		add subrequest parameter '$artifact'
end

rule "Guess run executable after build"
	when
		active activity 'BuildActivity'
		$folder : BuildOutputDir for activity
		not ExecutableFileArtifact for activity
		not subrequest ReqGuessRunExecutable for activity
	then
		add subrequest 'ReqGuessRunExecutable'
		add subrequest parameter '$folder'
end

rule "Guess run executable after build: Exec artifact found"
	when
	 	active activity 'BuildActivity'
		$exec : ExecFileArtifactList(size == 1) for activity
	then
		insert artifact '(ExecutableFileArtifact)$exec.get(0)' as 'GenericExecutableFileArtifact'
end

rule "Guess run executable after build: multiple exec artifacts found"
	when
	 	active activity 'BuildActivity'
		not ExecutableFileArtifact for activity
		$exec : ExecFileArtifactList(size > 1) for activity
	then
		// user action to choose the correct exec or build file
		def user action UserActionSelectBuildOrRun
		add user action attr ExecArtifacts as $exec
		add user action
end

rule "Guess run executable after build: no exec artifacts found"
	when
	 	active activity 'BuildActivity'
		$exec : ExecFileArtifactList(size == 0) for activity
	then
		activity failed with message "no executable files found"
		insertLogical BuildErr_NoBuildOrExecFilesFound;
end
