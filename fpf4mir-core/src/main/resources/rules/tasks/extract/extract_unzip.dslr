//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////


// ----------------------------------- Output parameters ---------------------------------------

rule "Evaluate ExtractActivity result"
	when 
	    active activity 'ExtractActivity'
	    exec command succeeded
		$extracted : FolderArtifact for activity
		$file : FileArtifact for activity
	then 
		activity succeeded
		add activity status parameter '$extracted' with name '$file.getName()';
end

rule "ExtractActivity : fail if no TmpDir provided"
	when 
	    active activity 'ExtractActivity'
>	    not TmpDirRoot( )
	then
		activity failed with message "No TmpDir provided"
end

rule "ExtractActivity : fail if no FileArtifact to be extracted was provided"
	when 
	    active activity 'ExtractActivity'
	    not FileArtifact for activity
	then
		activity failed with message "No FileArtifact to be extracted was provided"
end

// #############################################################################################

rule "Prepare output dir"
	when 
	    active activity 'ExtractActivity'
>	    $tmp : TmpDirRoot( )
	then
>		insert( $tmp.newTempFolder( $activity ) );
end

rule "Unzip with jar: arguments"
	when 
	    active activity 'ExtractActivity'
		$file : FileArtifact for activity
	then
		add ordinal 1 "xf"
		add ordinal 2 $file.getAbsolutePath()
end

rule "Unzip with jar command"
	when 
	    active activity 'ExtractActivity'
	    cmd options for activity
>	    $target : FolderArtifact( activity == $activity )
	then
		execute command "jar" in working dir $target
end
