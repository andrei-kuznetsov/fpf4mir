//////////////////////////  Import all  ////////////////////////////////////
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.activity.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.aliases.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.artifact.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.candidates.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.cmd.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.env.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.request.lifecycle.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.rest.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.userinfo.impl.*;
import ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.utils.*;
///////////////////////////////////////////////////////////////////////////////

// ----------------------------------- Output parameters ---------------------------------------

rule "Assert DeployFolder"
	when
		active activity 'DeployFolderActivity'
		$folder : FolderArtifact for activity
	then
		activity succeeded
		add activity status parameter '$folder';
end

// #############################################################################################

rule "DownloadArtifact"
	when 
		active activity 'DeployFolderActivity'
>		$ref : ArtifactRef(activity == $activity)
>		not Artifact(activity == $activity)
	then
		add subrequest 'ReqDownloadHttp'
		add subrequest parameter '$ref'
end


rule "Assert Downloaded Artifact"
	when 
	    active activity 'DeployFolderActivity'
		subrequest 'ReqDownloadHttp' for activity
		subrequest succeeded
		subrequest outputs (
			subrequest output 'Alias'
>		)
	then
		add activity fact from request output
end


rule "Assert Download Failed Artifact"
	when 
	    active activity 'DeployFolderActivity'
		subrequest 'ReqDownloadHttp' for activity
		subrequest failed
	then
		activity failed with status "Can't download artifact"
end

rule "ExtractArtifact"
	when 
		active activity 'DeployFolderActivity'
		$artifact : FileArtifact(fileName.endsWith(".zip")) for activity
		not FolderArtifact for activity
	then
		add subrequest 'ReqExtract'
		add subrequest parameter '$artifact'
end

rule "Process exctracted artifact failed"
	when
		active activity 'DeployFolderActivity'
		subrequest 'ReqExtract' for activity
		subrequest failed
	then
		activity failed with status "Can't extract artifact. Reason: " + $subrequestStatus.getMessage()
end


rule "Deploy default: provide parent folder"
		salience -1
	when 
		active activity 'DeployFolderActivity'
		$artifact : FileArtifact for activity
		not subrequest 'Request' for activity
		not FolderArtifact for activity
	then
		insert '$artifact.getName(), $artifact._getFile().getParent(), ""' as 'GenericFolderArtifact';
end
